import React, { useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Button,
  Paper,
  Alert,
  CircularProgress,
  Divider,
} from '@mui/material';
import { testGeminiConnection } from '../services/geminiService';

const DebugAPI: React.FC = () => {
  const [testing, setTesting] = useState(false);
  const [results, setResults] = useState<any[]>([]);

  const addLog = (type: 'info' | 'success' | 'error', message: string, data?: any) => {
    setResults(prev => [...prev, { 
      type, 
      message, 
      data,
      timestamp: new Date().toLocaleTimeString() 
    }]);
  };

  const testAPI = async () => {
    setTesting(true);
    setResults([]);

    try {
      // Test 1: Check console logs
      addLog('info', 'üîç Ki·ªÉm tra Console Logs...', 'M·ªü F12 > Console ƒë·ªÉ xem logs chi ti·∫øt');

      // Test 2: Test connection
      addLog('info', 'üì° Test k·∫øt n·ªëi v·ªõi Gemini API...');
      const connected = await testGeminiConnection();
      
      if (connected) {
        addLog('success', '‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!', 'API key ho·∫°t ƒë·ªông');
      } else {
        addLog('error', '‚ùå K·∫øt n·ªëi th·∫•t b·∫°i!', 'Ki·ªÉm tra API key ho·∫∑c network');
      }

      // Test 3: Test simple generation
      addLog('info', 'üß™ Test t·∫°o c√¥ng th·ª©c ƒë∆°n gi·∫£n...');
      const { generateExcelFormula } = await import('../services/geminiService');
      
      try {
        const result = await generateExcelFormula('T√≠nh t·ªïng A1 ƒë·∫øn A10');
        addLog('success', '‚úÖ T·∫°o c√¥ng th·ª©c th√†nh c√¥ng!', result);
      } catch (error: any) {
        addLog('error', '‚ùå T·∫°o c√¥ng th·ª©c th·∫•t b·∫°i!', error.message);
      }

    } catch (error: any) {
      addLog('error', '‚ùå L·ªói nghi√™m tr·ªçng!', error.message);
    } finally {
      setTesting(false);
    }
  };

  const testDirectAPI = async () => {
    setTesting(true);
    setResults([]);

    const apiKey = 'AIzaSyB8GiRyoOAe-lCkxr_eqCjSMfYl3BgeeIM';

    try {
      // Test 1: List models
      addLog('info', 'üìã L·∫•y danh s√°ch models...');
      const listUrl = `https://generativelanguage.googleapis.com/v1/models?key=${apiKey}`;
      
      const listRes = await fetch(listUrl);
      const listData = await listRes.json();
      
      if (!listRes.ok) {
        addLog('error', '‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch models', {
          status: listRes.status,
          error: listData
        });
      } else {
        const models = listData.models?.map((m: any) => m.name) || [];
        addLog('success', `‚úÖ T√¨m th·∫•y ${models.length} models`, models.slice(0, 5));
      }

      // Test 2: Generate with a specific model
      addLog('info', 'üß™ Test generate v·ªõi gemini-1.5-flash...');
      const genUrl = `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`;
      
      const genRes = await fetch(genUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: 'Hello, respond with "OK"' }]
          }]
        })
      });

      const genData = await genRes.json();
      
      if (!genRes.ok) {
        addLog('error', '‚ùå Generate th·∫•t b·∫°i', {
          status: genRes.status,
          error: genData
        });
      } else {
        const text = genData.candidates?.[0]?.content?.parts?.[0]?.text || 'No text';
        addLog('success', '‚úÖ Generate th√†nh c√¥ng!', { response: text });
      }

    } catch (error: any) {
      addLog('error', '‚ùå Network error', {
        message: error.message,
        hint: 'C√≥ th·ªÉ b·ªã CORS ho·∫∑c network issue'
      });
    } finally {
      setTesting(false);
    }
  };

  return (
    <Box sx={{ py: 8, backgroundColor: '#f9fafb', minHeight: '100vh' }}>
      <Container maxWidth="md">
        <Typography variant="h3" sx={{ mb: 2, fontWeight: 'bold', textAlign: 'center' }}>
          üîß Debug API Tool
        </Typography>
        <Typography variant="body1" sx={{ mb: 4, textAlign: 'center', color: '#6b7280' }}>
          C√¥ng c·ª• ki·ªÉm tra v√† debug Gemini API
        </Typography>

        <Paper sx={{ p: 4, mb: 3 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            B∆∞·ªõc 1: M·ªü Console
          </Typography>
          <Alert severity="info" sx={{ mb: 2 }}>
            Nh·∫•n <strong>F12</strong> ho·∫∑c <strong>Ctrl+Shift+I</strong> ‚Üí ch·ªçn tab <strong>Console</strong>
          </Alert>
          <Typography variant="body2" sx={{ mb: 3, color: '#6b7280' }}>
            T·∫•t c·∫£ logs chi ti·∫øt s·∫Ω xu·∫•t hi·ªán trong Console v·ªõi prefix [GeminiService]
          </Typography>

          <Divider sx={{ my: 3 }} />

          <Typography variant="h6" sx={{ mb: 2 }}>
            B∆∞·ªõc 2: Ch·∫°y Test
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
            <Button
              variant="contained"
              onClick={testAPI}
              disabled={testing}
              startIcon={testing ? <CircularProgress size={20} /> : null}
              sx={{
                backgroundColor: '#10b981',
                '&:hover': { backgroundColor: '#059669' },
              }}
            >
              {testing ? 'ƒêang test...' : 'Test v·ªõi Service'}
            </Button>

            <Button
              variant="outlined"
              onClick={testDirectAPI}
              disabled={testing}
              sx={{
                borderColor: '#10b981',
                color: '#10b981',
                '&:hover': { borderColor: '#059669', backgroundColor: 'rgba(16, 185, 129, 0.1)' },
              }}
            >
              Test Direct API
            </Button>
          </Box>

          {results.length > 0 && (
            <Paper sx={{ p: 3, backgroundColor: '#f9fafb', maxHeight: '400px', overflow: 'auto' }}>
              {results.map((result, index) => (
                <Box key={index} sx={{ mb: 2 }}>
                  <Alert 
                    severity={result.type === 'success' ? 'success' : result.type === 'error' ? 'error' : 'info'}
                    sx={{ mb: 1 }}
                  >
                    <Typography variant="body2" sx={{ fontWeight: 600 }}>
                      [{result.timestamp}] {result.message}
                    </Typography>
                    {result.data && (
                      <Box
                        component="pre"
                        sx={{
                          mt: 1,
                          p: 1,
                          backgroundColor: 'rgba(0,0,0,0.05)',
                          borderRadius: 1,
                          fontSize: '0.75rem',
                          overflow: 'auto',
                          maxHeight: '150px',
                        }}
                      >
                        {typeof result.data === 'string' 
                          ? result.data 
                          : JSON.stringify(result.data, null, 2)}
                      </Box>
                    )}
                  </Alert>
                </Box>
              ))}
            </Paper>
          )}
        </Paper>

        <Paper sx={{ p: 4 }}>
          <Typography variant="h6" sx={{ mb: 2, color: '#dc2626' }}>
            ‚ö†Ô∏è L·ªói th∆∞·ªùng g·∫∑p
          </Typography>

          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
              1. CORS Error
            </Typography>
            <Typography variant="body2" sx={{ color: '#6b7280', mb: 2 }}>
              ‚Ä¢ Ch·ªâ x·∫£y ra khi test tr√™n localhost<br/>
              ‚Ä¢ Gi·∫£i ph√°p: D√πng Chrome, t·∫Øt extensions (ad-blocker)<br/>
              ‚Ä¢ Ho·∫∑c: Deploy l√™n Vercel/Netlify
            </Typography>
          </Box>

          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
              2. API Key Invalid
            </Typography>
            <Typography variant="body2" sx={{ color: '#6b7280', mb: 2 }}>
              ‚Ä¢ Check API key trong src/services/geminiService.ts<br/>
              ‚Ä¢ Ki·ªÉm tra quota tr√™n Google AI Studio<br/>
              ‚Ä¢ Key c√≥ th·ªÉ b·ªã disable ho·∫∑c h·∫øt quota
            </Typography>
          </Box>

          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
              3. Model Not Found
            </Typography>
            <Typography variant="body2" sx={{ color: '#6b7280', mb: 2 }}>
              ‚Ä¢ Model name c√≥ th·ªÉ kh√¥ng available cho API key<br/>
              ‚Ä¢ Xem logs console ƒë·ªÉ bi·∫øt model n√†o ƒëang d√πng<br/>
              ‚Ä¢ Code s·∫Ω t·ª± ƒë·ªông fallback sang models kh√°c
            </Typography>
          </Box>

          <Box>
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
              4. Empty Response
            </Typography>
            <Typography variant="body2" sx={{ color: '#6b7280' }}>
              ‚Ä¢ Check finishReason trong console logs<br/>
              ‚Ä¢ SAFETY: N·ªôi dung b·ªã filter<br/>
              ‚Ä¢ MAX_TOKENS: V∆∞·ª£t gi·ªõi h·∫°n tokens<br/>
              ‚Ä¢ OTHER: L·ªói kh√°c
            </Typography>
          </Box>
        </Paper>

        <Alert severity="warning" sx={{ mt: 3 }}>
          <Typography variant="body2">
            <strong>G·ª≠i cho t√¥i:</strong>
            <br/>
            1. Screenshot Console (F12 ‚Üí Console tab)
            <br/>
            2. Screenshot k·∫øt qu·∫£ test ph√≠a tr√™n
            <br/>
            3. Message l·ªói ch√≠nh x√°c b·∫°n th·∫•y tr√™n UI
          </Typography>
        </Alert>
      </Container>
    </Box>
  );
};

export default DebugAPI;

